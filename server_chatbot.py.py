{"cells":[{"cell_type":"code","source":["# Este arquivo demonstra a lógica do servidor de backend para o chatbot.\n","# Ele simula como o servidor receberia uma mensagem de um webhook do WhatsApp,\n","# se comunicaria com a API da Gemini e enviaria a resposta de volta.\n","\n","# Para rodar este código, você precisará instalar a biblioteca Flask:\n","# pip install Flask requests\n","\n","from flask import Flask, request, jsonify\n","import requests\n","import os\n","\n","app = Flask(__name__)\n","\n","# --- Configurações ---\n","# A sua chave de API da Gemini será injetada como uma variável de ambiente pelo Heroku.\n","# Isso garante a segurança, pois a chave não fica visível no código-fonte.\n","GEMINI_API_KEY = os.environ.get(\"GEMINI_API_KEY\")\n","GEMINI_API_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent\"\n","\n","# A base de conhecimento detalhada pelo usuário, formatada para a IA.\n","knowledge_base = \"\"\"\n","# Base de Conhecimento do Chatbot\n","\n","## 1. Compra e Venda de Usados\n","\n","### **Estratégia de Negócio**\n","* Comprar itens a preços baixos e revendê-los.\n","* **Localização:** Anastácio - Bairro Altos da Cidade.\n","* **Contato:** WhatsApp: 67996789442.\n","\n","### **Estratégia de Vendas e Comunicação**\n","* **Regra Principal:** Foco em uma conversa humanizada, onde o bot ouve mais e fala menos. O cliente deve se sentir no controle.\n","* **Seja Reativo:** Responda apenas às perguntas feitas pelo cliente. Evite dar informações ou fazer ofertas (como entrega ou desconto) de forma proativa.\n","* **Negociação de Desconto:** Se o cliente pedir desconto, o bot deve responder que \"irá verificar se consegue dar o desconto\", em vez de oferecer um valor imediatamente.\n","* **Solicitações Fora do Escopo:** Se o cliente fizer uma pergunta inesperada (ex: \"Pode vir em minha casa?\"), o bot deve sugerir uma conversa por mensagem. Em casos mais complexos, pode sugerir a conversa pessoal com o Adrian.\n","\n","### **Estratégia de Atendimento para Entrega (Atualizada)**\n","* **Objetivo:** Fazer o cliente sentir que está \"ajudando na gasolina\".\n","* **Fluxo:**\n","    1.  Cliente pergunta sobre entrega.\n","    2.  Bot pergunta: \"Onde você mora?\".\n","    3.  Cliente informa o bairro e a cidade.\n","    4.  Bot responde: \"Eu consigo entregar se me ajudar na gasolina.\".\n","    5.  Se o cliente perguntar o valor, o bot usa a tabela abaixo e adiciona a frase \"já ajuda\".\n","    6.  Quando o cliente concordar, o bot pede o endereço por escrito.\n","    7.  Bot pergunta sobre a forma de pagamento (Pix, Cartão ou Dinheiro).\n","    8.  Confirma a entrega: \"ta ok, assim que estiver saindo daqui te aviso para que possa me aguardar.\"\n","* **Tabela de Preços (Ajuda na Gasolina):**\n","    * **1 a 2 km:** R$15\n","    * **2 a 4 km:** R$20\n","    * **5 a 9 km:** R$25 (mencione que a distância é maior por você morar em Anastácio, Bairro Altos da Cidade).\n","\n","### **Itens à Venda**\n","* **Banqueta Bistrô Alto + Bistrô**\n","    * **Categoria:** Móveis\n","    * **Descrição:** Banqueta Bistrô Alta (assento 76cm) e Bistrô com tampo de madeira maciça (1,02m). Vendidos separadamente ou em conjunto.\n","    * **Condição:** Usado — estado de novo.\n","    * **Preço:** R$150 (banqueta), R$250 (bistrô), R$380 (conjunto).\n","* **Mesa de vidro**\n","    * **Categoria:** Pátio e jardim\n","    * **Descrição:** Mesa de vidro com pé de ferro decorado com planta. Tampo de vidro com 1m de diâmetro.\n","    * **Condição:** Usado — em boas condições.\n","    * **Preço:** R$250.\n","* **Cômoda 4 gavetas 1 porta**\n","    * **Categoria:** Móveis\n","    * **Descrição:** Cômoda com 4 gavetas e 1 porta. Possui apenas marcas de uso.\n","    * **Condição:** Usado.\n","    * **Preço:** R$350.\n","* **Máquina de lavar Suggar 10kg**\n","    * **Categoria:** Eletrodomésticos\n","    * **Descrição:** Máquina de lavar Suggar de 10kg, funcionando perfeitamente.\n","    * **Condição:** Usado — em perfeitas condições.\n","    * **Preço:** R$380 (preço anterior R$450). Aceita cartão.\n","\n","## 2. Energia Solar - Desconto na Fatura Energisa\n","\n","### **Estratégia de Atendimento (Atualizada)**\n","* **Clientes-alvo:** Residenciais (CPF) e comerciais (CNPJ) que pagam acima de R$250/mês na conta de energia.\n","* **Área de Atendimento:** Anastácio - MS e Aquidauana - MS.\n","* **Fluxo:**\n","    1.  Cliente pergunta sobre o desconto.\n","    2.  Bot responde que ele pode economizar de 20% a 40% na fatura da Energisa.\n","    3.  Se o cliente perguntar como obter o desconto, o bot pede a foto ou PDF da fatura para a simulação.\n","    4.  Bot explica que a simulação é feita com base no consumo para mostrar o desconto.\n","    5.  Se o cliente concordar, o bot solicita CPF/CNPJ e e-mail para formalizar a proposta.\n","\n","### **Requisitos para Contratação (Atualizado)**\n","* Foto ou PDF da fatura mais recente.\n","* CPF ou CNPJ do cliente.\n","* E-mail do cliente.\n","\n","### **Perguntas Frequentes (FAQ)**\n","* **\"Mas como funciona esse desconto?\"**\n","    * **Resposta:** Nós fornecemos energia solar para a Energisa, o que evita custos de rede elétrica e permite oferecer descontos. O cliente não precisa instalar nada, apenas assinar o contrato para receber a fatura com desconto.\n","* **\"O que preciso fazer para começar?\"**\n","    * **Resposta:** Envie a fatura mais recente, CPF/CNPJ (conforme a fatura) e seu e-mail. Calculamos o desconto (20% a 40%) e enviamos a proposta e o contrato por e-mail.\n","* **\"Preciso instalar placas solares?\"**\n","    * **Resposta:** Não, o fornecimento é direto via contrato com a Energisa.\n","* **\"Vocês atendem quais cidades?\"**\n","    * **Resposta:** Atendemos clientes em Anastácio e Aquidauana, no Mato Grosso do Sul.\n","\"\"\"\n","\n","# Importa a biblioteca `requests` para fazer requisições HTTP para a API da Gemini.\n","# A biblioteca `os` é usada para aceder às variáveis de ambiente, garantindo a segurança da sua chave de API.\n","import requests\n","import os\n","\n","@app.route('/webhook', methods=['POST'])\n","def webhook():\n","    \"\"\"\n","    Simula o webhook do WhatsApp. Esta rota recebe as mensagens da API do WhatsApp.\n","    \"\"\"\n","    data = request.json\n","    print(\"Dados recebidos do webhook:\", data)\n","\n","    # Simula a extração da mensagem do corpo da requisição do WhatsApp.\n","    # Em uma aplicação real, a estrutura seria mais complexa.\n","    if 'messages' not in data:\n","        return jsonify({\"status\": \"error\", \"message\": \"Nenhuma mensagem encontrada\"}), 400\n","\n","    # Pega a primeira mensagem do usuário\n","    user_message = data['messages'][0]['text']['body']\n","    # Pega o ID do usuário para responder a ele (não usado neste protótipo, mas crucial na implementação real)\n","    user_id = data['messages'][0]['from']\n","\n","    # Prepara o payload para a API da Gemini\n","    payload = {\n","        \"contents\": [{\"parts\": [{\"text\": user_message}]}],\n","        \"systemInstruction\": {\"parts\": [{\"text\": SYSTEM_PROMPT}]}\n","    }\n","\n","    headers = {\n","        \"Content-Type\": \"application/json\"\n","    }\n","\n","    try:\n","        # Envia a mensagem para a API da Gemini\n","        response = requests.post(\n","            f\"{GEMINI_API_URL}?key={GEMINI_API_KEY}\",\n","            json=payload,\n","            headers=headers\n","        )\n","        response.raise_for_status() # Lança um erro para status de resposta ruins\n","\n","        gemini_response = response.json()\n","        response_text = gemini_response['candidates'][0]['content']['parts'][0]['text']\n","\n","        print(\"Resposta da Gemini:\", response_text)\n","\n","        # Em uma implementação real, você usaria a API do WhatsApp para\n","        # enviar esta resposta de volta ao usuário.\n","        # Por exemplo: whatsapp_api.send_message(user_id, response_text)\n","\n","        return jsonify({\n","            \"status\": \"success\",\n","            \"message\": \"Mensagem processada e resposta gerada.\",\n","            \"response_text\": response_text\n","        }), 200\n","\n","    except requests.exceptions.RequestException as e:\n","        print(f\"Erro ao chamar a API da Gemini: {e}\")\n","        return jsonify({\"status\": \"error\", \"message\": \"Erro na comunicação com a IA\"}), 500\n","\n","if __name__ == '__main__':\n","    # Para executar localmente, use: python sua_aplicacao.py\n","    # O debug=True é útil para desenvolvimento.\n","    port = int(os.environ.get('PORT', 5000))\n","    app.run(host='0.0.0.0', port=port, debug=True)"],"outputs":[{"output_type":"stream","name":"stdout","text":[" * Serving Flask app '__main__'\n"," * Debug mode: on\n"]},{"output_type":"stream","name":"stderr","text":["INFO:werkzeug:\u001b[31m\u001b[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\u001b[0m\n"," * Running on all addresses (0.0.0.0)\n"," * Running on http://127.0.0.1:5000\n"," * Running on http://172.28.0.12:5000\n","INFO:werkzeug:\u001b[33mPress CTRL+C to quit\u001b[0m\n","INFO:werkzeug: * Restarting with watchdog (inotify)\n"]}],"execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1VrtBTalcJGz","outputId":"cbaca58b-41e5-483f-a869-10fa085e5105"}}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}